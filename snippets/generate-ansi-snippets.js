import { execSync, spawnSync } from "child_process";
import { writeFileSync } from "fs";
import { AnsiUp } from "ansi_up";

function runBat(filename) {
  return execSync(`bat -p --color always --theme ansi ${filename}`, { encoding: "utf8" });
}

function runVitest() {
  return spawnSync("npm", ["exec", "vitest", "--", "--run", "--color", "--reporter", "verbose"], {
    encoding: "utf8",
  });
}

function runScreenfetch() {
  return spawnSync("screenfetch", ["-A", "Mac OS X"], { encoding: "utf8" });
}

const elixir = runBat("elixir.ex");
const python = runBat("python.py");
const typescript = runBat("typescript.ts");
const vitest = runVitest();
const screenfetch = runScreenfetch();

const au = new AnsiUp();
au.use_classes = true;

const elixirHtml = au.ansi_to_html(elixir).trim();
const pythonHtml = au.ansi_to_html(python).trim();
const typescriptHtml = au.ansi_to_html(typescript).trim();
const vitestStdoutHtml = au.ansi_to_html(vitest.stdout).trim();
const vitestStderrHtml = au.ansi_to_html(vitest.stderr).trim();
const screenfetchHtml = au.ansi_to_html(screenfetch.stdout.replaceAll("`", "\\`").trim());

const template = `/*
 * Autogenerated file.
 * Do not touch
 * Willy
 */

export const elixirSnippet = \`${elixirHtml}\`;

export const pythonSnippet = \`${pythonHtml}\`;

export const typescriptSnippet = \`${typescriptHtml}\`;

export const vitestSnippet = \`${vitestStdoutHtml}

${vitestStderrHtml}\`;

export const screenfetchSnippet = \`${screenfetchHtml}\`;
`;

const targetFile = "../src/lib/snippets.ts";
writeFileSync(targetFile, template, "utf8");

console.log(`Successfully generated ${targetFile}`);
